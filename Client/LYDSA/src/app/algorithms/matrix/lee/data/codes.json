{
    "typescript": [
        "interior(x, y, matrix): boolean {",
        "    if (x >= 1 && x <= matrix.height && y >= 1 && y <= matrix.width)" ,
        "        return true;",
        "    return false;",
        "}",
        "run(input: LeeInput[]) {",
        "    var matrix = input[0];",
        "    var visited: boolean[][] = new Array(matrix.height), prev: any[][] = new Array(matrix.height);",
        "    for (var i = 0; i < matrix.height; i++) {",
        "        visited[i] = new Array(matrix.width);",
        "        visited[i].fill(false, 0, matrix.width);",
        "        prev[i] = new Array(matrix.width);",
        "    }",
        "    for (var wall of matrix.walls) ",
        "        visited[wall.x][wall.y] = true;",
        "    var queue: any[] = [];",
        "    queue.push(matrix.start);",
        "    visited[matrix.start.x][matrix.stop.y];",
        "    var dx = [-1, 0, 1, 0];",
        "    var dy = [0, 1, 0, -1];",
        "    while (queue.length > 0 && visited[matrix.stop.x][matrix.stop.y] == false) {",
        "        var currentCell = queue[0];",
        "        queue.shift();",
        "        for (var i = 0; i < 4; i++) ",
        "            if (this.interior(currentCell.x + dx[i], currentCell.y + dy[i], matrix) == true && visited[currentCell.x + dx[i]][currentCell.y + dy[i]] == false) {",
        "                visited[currentCell.x + dx[i]][currentCell.y + dy[i]] = true;",
        "                prev[currentCell.x + dx[i]][currentCell.y + dy[i]] = currentCell;",
        "                queue.push({ x: currentCell.x + dx[i], y: currentCell.y + dy[i] });",
        "            }",
        "    }",
        "}"
    ]    
}