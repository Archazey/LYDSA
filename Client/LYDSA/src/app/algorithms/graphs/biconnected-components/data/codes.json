{
    "typescript": [
        "dfs(node, edges, visited, level, minlevel, stack) {",
        "    visited[node] = true;",
        "    minlevel[node] = level[node];",
        "    for (var neighbour of edges) {",
        "        if (visited[neighbour] == false) {",
        "            level[neighbour] = level[node] + 1;",
        "            stack.push(neighbour);",
        "            dfs(neighbour, edges, visited, level, minlevel, stack);",
        "            minlevel[node] = Math.min(minlevel[node], minlevel[neighbour]);",
        "            if (minlevel[neighbour] >= level[node]) {",
        "                while (stack[stack.length - 1] != neighbour)",
        "                    stack.splice(stack.length - 1, 1);",
        "                stack.splice(stack.length - 1, 1);",
        "            }",
        "        }",
        "        minlevel[node] = Math.min(minlevel[node], level[neighbour]);",
        "    }",
        "}",
        "run(input: BiconnectedComponentsInput[]) {",
        "    var graph = input[0];",
        "    var visited: boolean[] = new Array(graph.numberOfNodes);",
        "    var level: number[] = new Array(graph.numberOfNodes), minlevel = new Array(graph.numberOfNodes);",
        "    var stack: number[] = [];",
        "    visited.fill(false, 0, graph.numberOfNodes);",
        "    level.fill(1, 0, graph.numberOfNodes);",
        "    minlevel.fill(0, 0, graph.numberOfNodes);",
        "    for (var i = 0; i < graph.numberOfNodes; i++) ",
        "        if (visited[i] == false)" ,
        "            dfs(i, graph.edges, visited, level, minlevel, stack);",
        "}"
    ]
}