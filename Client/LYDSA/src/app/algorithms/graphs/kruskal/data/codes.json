{
    "typescript": [
        "union(nodeA, nodeB, father) {",
        "   father[nodeA] = nodeB;",
        "}",
        "findFather(node, father) {",
        "   if (node != father[node])",
        "        father[node] = findFather(father[node], father);",
        "   return father[node];",
        "}",
        "run(input: KruskalInput[]) {",
        "    var graph = input[0];",
        "    var father = new Array(graph.numberOfNodes);",
        "    for (var i in father)",
        "        father[i] = i;",
        "    graph.edges.sort((edgeA, edgeB): number => {",
        "        return edgeA.cost - edgeB.cost;",
        "    });",
        "    for (var edge of graph.edges) {",
        "        var fatherA = findFather(edge.nodeA, father);",
        "        var fatherB = findFather(edge.nodeB, father);",
        "        if (fatherA != fatherB)",
        "            union(fatherA, fatherB, father);",
        "    }",
        "}"
    ]
}